default_platform(:ios)
fastlane_require 'xcodeproj'
fastlane_require 'dotenv'
fastlane_require 'open-uri'

USER_ENV_FILE_PATH = File.join(Dir.home, '.simplenoteios-env.default')
PROJECT_ENV_FILE_PATH = File.expand_path(File.join(Dir.pwd, '../.configure-files/project.env'))

before_all do
  # Check that the env files exist
  unless is_ci || File.file?(USER_ENV_FILE_PATH)
    UI.user_error!("~/.simplenoteios-env.default not found: Please copy env/user.env-example to #{USER_ENV_FILE_PATH} and fill in the values")
  end
  unless File.file?(PROJECT_ENV_FILE_PATH)
    UI.user_error!("project.env not found: Make sure your configuration is up to date with `rake dependencies`")
  end

  # This allows code signing to work on CircleCI
  # It is skipped if this isn't running on CI
  # See https://circleci.com/docs/2.0/ios-codesigning/
  setup_circle_ci
end

platform :ios do
########################################################################
# Environment
########################################################################
Dotenv.load(USER_ENV_FILE_PATH)
Dotenv.load(PROJECT_ENV_FILE_PATH)
ENV[GHHELPER_REPO="Automattic/simplenote-ios"]
ENV["PROJECT_NAME"]="Simplenote"
ENV["PROJECT_ROOT_FOLDER"]="./"
ENV["PUBLIC_CONFIG_FILE"]="./config/Version.Public.xcconfig"
ENV["DOWNLOAD_METADATA"]="./fastlane/download_metadata.swift"
ENV["PROJECT_ROOT_FOLDER"]="./"

# Use this instead of getting values from ENV directly
# It will throw an error if the requested value is missing
def get_required_env(key)
  unless ENV.key?(key)
    UI.user_error!("Environment variable '#{key}' is not set. Have you setup #{USER_ENV_FILE_PATH} correctly?")
  end
  ENV[key]
end

########################################################################
# Release Lanes
########################################################################
  #####################################################################################
  # code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane code_freeze [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane code_freeze
  # bundle exec fastlane code_freeze skip_confirm:true
  #####################################################################################
  desc "Creates a new release branch from the current develop"
  lane :code_freeze do | options |
    old_version = ios_codefreeze_prechecks(options)
    
    ios_bump_version_release()
    new_version = ios_get_app_version()
    ios_update_release_notes(new_version: new_version)
    setbranchprotection(repository:GHHELPER_REPO, branch: "release/#{new_version}")
    setfrozentag(repository:GHHELPER_REPO, milestone: new_version)

    ios_localize_project()
    ios_tag_build()
    get_prs_list(repository:GHHELPER_REPO, start_tag:"#{old_version}", report_path:"#{File.expand_path('~')}/simplenoteios_prs_list_#{old_version}_#{new_version}.txt")
  end

  #####################################################################################
  # update_appstore_strings
  # -----------------------------------------------------------------------------------
  # This lane updates the AppStoreStrings.pot files with the latest content from
  # the release_notes.txt file and the other text sources
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane update_appstore_strings version:<release note version>
  #
  # Example:
  # bundle exec fastlane update_appstore_strings version:1.1
  #####################################################################################
  desc "Updates the AppStoreStrings.pot file with the latest data"
  lane :update_appstore_strings do | options |
    prj_folder = Pathname.new(File.join(Dir.pwd, "..")).expand_path.to_s
    source_metadata_folder = File.join(prj_folder, "fastlane/appstoreres/metadata/source")

    files = {
      whats_new: File.join(prj_folder,  "/Simplenote/Resources/release_notes.txt"),
      app_store_subtitle: File.join(source_metadata_folder, "subtitle.txt"),
      app_store_desc: File.join(source_metadata_folder, "description.txt"),
      app_store_keywords: File.join(source_metadata_folder, "keywords.txt")
    }

    ios_update_metadata_source(po_file_path: prj_folder + "/Simplenote/Resources/AppStoreStrings.pot", 
      source_files: files, 
      release_version: options[:version])
  end

  #####################################################################################
  # new_beta_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new beta release. It will update the
  # current release branch by default. If you want to update a different branch
  # (i.e. hotfix branch) pass the related version with the 'base_version' param
  # (example: base_version:10.6.1 will work on the 10.6.1 branch)
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_beta_release [skip_confirm:<skip confirm>] [base_version:<version>]
  #
  # Example:
  # bundle exec fastlane new_beta_release
  # bundle exec fastlane new_beta_release skip_confirm:true
  # bundle exec fastlane new_beta_release base_version:10.6.1
  #####################################################################################
  desc "Updates a release branch for a new beta release"
  lane :new_beta_release do | options |
    ios_betabuild_prechecks(options)
    ios_bump_version_beta()
    ios_tag_build()
  end

  #####################################################################################
  # new_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new hotix release. 
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_hotfix_release [skip_confirm:<skip confirm>] [version:<version>]
  #
  # Example:
  # bundle exec fastlane new_hotfix_release version:10.6.1
  # bundle exec fastlane new_hotfix_release skip_confirm:true version:10.6.1
  #####################################################################################
  desc "Creates a new hotfix branch from the given tag"
  lane :new_hotfix_release do | options |
    prev_ver = ios_hotfix_prechecks(options)
    ios_bump_version_hotfix(previous_version: prev_ver, version: options[:version])
  end

  #####################################################################################
  # finalize_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane finalizes the hotfix branch. 
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_hotfix_release [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane finalize_hotfix_release skip_confirm:true  
  #####################################################################################
  desc "Creates a new hotfix branch from the given tag"
  lane :finalize_hotfix_release do | options |
    ios_finalize_prechecks(options)
    ios_tag_build()
  end
  
  #####################################################################################
  # finalize_release
  # -----------------------------------------------------------------------------------
  # This lane finalize a release: updates store metadata, pushes the final tag and  
  # cleans all the temp ones
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_release [skip_confirm:<skip confirm>] [version:<version>] 
  #
  # Example:
  # bundle exec fastlane finalize_release 
  # bundle exec fastlane finalize_release skip_confirm:true 
  #####################################################################################
  desc "Removes all the temp tags and puts the final one"
  lane :finalize_release do | options |
    ios_finalize_prechecks(options)
    ios_update_metadata(options) unless ios_current_branch_is_hotfix
    ios_bump_version_beta() unless ios_current_branch_is_hotfix
    ios_final_tag(options)

    # Wrap up
    version = ios_get_app_version()
    removebranchprotection(repository:GHHELPER_REPO, branch: "release/#{version}")
    setfrozentag(repository:GHHELPER_REPO, milestone: version, freeze: false)
    create_new_milestone(repository:GHHELPER_REPO)
    close_milestone(repository:GHHELPER_REPO, milestone: version)
  end
  
  #####################################################################################
  # build_and_upload_release
  # -----------------------------------------------------------------------------------
  # This lane builds the app and upload it for both internal and external distribution 
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_release [skip_confirm:<skip confirm>] [create_gh_release:<create release on GH>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_release 
  # bundle exec fastlane build_and_upload_release skip_confirm:true 
  #####################################################################################
  desc "Builds and updates for distribution"
  lane :build_and_upload_release do | options |
    final_tag = (is_ci() == true) ? ios_validate_ci_build() : false
    create_release = (final_tag && is_ci()) || options[:create_gh_release]

    ios_build_prechecks(skip_confirm: options[:skip_confirm], 
      internal: false,
      internal_on_single_version: !final_tag, 
      external: true)

    ios_build_preflight()
    build_and_upload_internal(skip_prechecks: true, skip_confirm: options[:skip_confirm]) unless final_tag
    build_and_upload_itc(skip_prechecks: true, skip_confirm: options[:skip_confirm], create_release: create_release)
  end

  #####################################################################################
  # build_and_upload_internal
  # -----------------------------------------------------------------------------------
  # This lane builds the app and upload it for internal testing  
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_internal [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_internal 
  # bundle exec fastlane build_and_upload_internal skip_confirm:true 
  #####################################################################################
  desc "Builds and updates for distribution"
  lane :build_and_upload_internal do | options |
    ios_build_prechecks(skip_confirm: options[:skip_confirm], internal: false) unless (options[:skip_prechecks])
    ios_build_preflight() unless (options[:skip_prechecks])

    internal_code_signing
    
    gym(
      scheme: "Simplenote",
      configuration: "Distribution Internal",
      workspace: "Simplenote.xcworkspace",
      export_method: "enterprise",
      clean: true,
      output_directory: "./build/",
      export_team_id: ENV["INT_EXPORT_TEAM_ID"],
      export_options: {
        method: "enterprise",
        provisioningProfiles: { 
          "com.codality.NotationalFlow.Internal" => "match InHouse com.codality.NotationalFlow.Internal",
          "com.codality.NotationalFlow.Internal.Share" => "match InHouse com.codality.NotationalFlow.Internal.Share"
      }})

    sh("mv ../build/Simplenote.ipa \"../build/Simplenote Internal.ipa\"")

    appcenter_upload(
      api_token: ENV["APPCENTER_API_TOKEN"],
      owner_name: "automattic",
      owner_type: "organization", 
      app_name: "Simplenote",
      file: "./build/Simplenote Internal.ipa",
      notify_testers: false 
    )

    sentry_upload_dsym(
      auth_token: ENV["SENTRY_AUTH_TOKEN"],
      org_slug: 'a8c',
      project_slug: 'simplenote-ios',
      dsym_path: "./build/Simplenote.app.dSYM.zip"
    )
  end
  
  #####################################################################################
  # build_and_upload_itc
  # -----------------------------------------------------------------------------------
  # This lane builds the app and upload it for external distribution  
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_itc [skip_confirm:<skip confirm>] [create_release:<Create release on GH> ]
  #
  # Example:
  # bundle exec fastlane build_and_upload_itc 
  # bundle exec fastlane build_and_upload_itc skip_confirm:true 
  #####################################################################################
  desc "Builds and uploads for distribution"
  lane :build_and_upload_itc do | options |
    ios_build_prechecks(skip_confirm: options[:skip_confirm], external: true) unless (options[:skip_prechecks])
    ios_build_preflight() unless (options[:skip_prechecks])

    appstore_code_signing 

    gym(scheme: "Simplenote", 
      workspace: "Simplenote.xcworkspace",
      configuration: "Distribution AppStore",
      clean: true,
      export_options: {
        method: "app-store",
        export_team_id: ENV["EXT_EXPORT_TEAM_ID"], 
        provisioningProfiles: { 
          "com.codality.NotationalFlow" => "match AppStore com.codality.NotationalFlow",
          "com.codality.NotationalFlow.Share" => "match AppStore com.codality.NotationalFlow.Share"
        }
      }
    )

    testflight(skip_waiting_for_build_processing: true)

    sh("rm ../Simplenote.ipa")
    dSYM_PATH = File.dirname(Dir.pwd) + "/Simplenote.app.dSYM.zip"

    sentry_upload_dsym(
      dsym_path: dSYM_PATH,
      auth_token: ENV["SENTRY_AUTH_TOKEN"],
      org_slug: 'a8c',
      project_slug: 'simplenote-ios',
    )

    sh("rm #{dSYM_PATH}")

    if (options[:create_release])
      archive_zip_path = File.dirname(Dir.pwd) + "/Simplenote.xarchive.zip"
      zip(path: lane_context[SharedValues::XCODEBUILD_ARCHIVE], output_path: archive_zip_path)

      version = ios_get_app_version()
      create_release(repository:GHHELPER_REPO, 
        version: version, 
        release_notes_file_path:'./Simplenote/Resources/release_notes.txt',
        release_assets:"#{archive_zip_path}"
      )

      sh("rm #{archive_zip_path}") 
    end
  end

  #####################################################################################
  # build_and_upload_installable_build
  # -----------------------------------------------------------------------------------
  # This lane builds the app and upload it for adhoc testing 
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_installable_build [version_long:<version_long>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_installable_build 
  # bundle exec fastlane build_and_upload_installable_build build_number:123 
  #####################################################################################
  desc "Builds and uploads an installable build"
  lane :build_and_upload_installable_build do | options |
    alpha_code_signing

    # Get the current build version, and update it if needed
    version_config_path = "../config/Version.Public.xcconfig"
    versions = Xcodeproj::Config.new(File.new(version_config_path)).to_hash
    build_number = versions["VERSION_LONG"]

    if options.key?(:build_number)
      build_number = options[:build_number]

      UI.message("Updating build version to #{build_number}")

      versions["VERSION_LONG"] = build_number
      new_config = Xcodeproj::Config.new(versions)
      new_config.save_as(Pathname.new(version_config_path))
    end

    gym(
      scheme: "Simplenote",
      configuration: "Distribution Alpha",
      workspace: "Simplenote.xcworkspace",
      export_method: "enterprise",
      clean: true,
      output_directory: "./build/",
      export_team_id: ENV["INT_EXPORT_TEAM_ID"],
      export_options: { 
        method: "enterprise",
        provisioningProfiles: { 
          "com.codality.NotationalFlow.Alpha" => "match InHouse com.codality.NotationalFlow.Alpha",
          "com.codality.NotationalFlow.Alpha.Share" => "match InHouse com.codality.NotationalFlow.Alpha.Share"
      }})
    
    sh("mv ../build/Simplenote.ipa \"../build/Simplenote Alpha.ipa\"")

    appcenter_upload(
      api_token: get_required_env("APPCENTER_API_TOKEN"),
      owner_name: "automattic",
      owner_type: "organization", 
      app_name: "Simplenote-Installable-Builds",
      file: "./build/Simplenote Alpha.ipa",
      destinations: "All-Users-of-Simplenote-Installable-Builds",
      notify_testers: false 
    )

    # Install SentryCLI prior to trying to upload dSYMs
    sh("curl -sL https://sentry.io/get-cli/ | bash")

    sentry_upload_dsym(
      auth_token: get_required_env("SENTRY_AUTH_TOKEN"),
      org_slug: 'a8c',
      project_slug: 'simplenote-ios',
      dsym_path: "./build/Simplenote.app.dSYM.zip",
    )

    download_url = Actions.lane_context[SharedValues::APPCENTER_DOWNLOAD_LINK]
    UI.message("Successfully built and uploaded installable build here: #{download_url}")
    install_url = "https://install.appcenter.ms/orgs/automattic/apps/Simplenote-Installable-Builds/"

    # Create a comment.json file so that Peril to comment with the build details, if this is running on CI
    comment_body = "You can test the changes on this Pull Request by downloading it from AppCenter [here](#{install_url}) with build number: #{build_number}. IPA is available [here](#{download_url}). If you need access to this, you can ask a maintainer to add you."
    File.write("comment.json", { body: comment_body }.to_json)
  end

  #####################################################################################
  # Screenshot lanes
  #####################################################################################

  # This is ideal when running locally. On CI, it's better to run each lane in
  # isolation, to leverage parallelism if necessary.
  #
  # On the other hand, right now Simplenote only needs one locale, so we might
  # as well keep using this on CI too. We still benefit from not having to
  # rebuild the app just to take the screenshots in light vs dark mode.
  desc "Walk through the app taking screenshots."
  lane :take_screenshots do |options|
    build_app_for_screenshots(options)

    # In order to preserve both light and dark screenshots, we won't be erasing
    # the screenshots folder in between captures but only on the first one.
    take_screenshots_from_app(
      options.merge({ mode: 'light', clear_previous_screenshots: true })
    )
    take_screenshots_from_app(
      options.merge({ mode: 'dark', clear_previous_screenshots: false })
    )
  end

  desc "Build the binaries to run to take the screenshots"
  lane :build_app_for_screenshots do
    scan(
      workspace: workspace_path,
      scheme: screenshots_scheme,
      build_for_testing: true,
      derived_data_path: derived_data_directory,
    )
  end

  desc "Runs through the app taking screenshots, using a prebuilt binary"
  lane :take_screenshots_from_app do |options|
    devices = options[:devices].split(',') || screenshot_devices

    languages = [
      "en-US"
    ]

    # Erase the Simulators between runs in order to get everything back to a
    # default state. This should also compensate for default CI installations
    # not having the Simulators need, by building them.
    rebuild_screenshot_devices(
      devices: devices,
      simulator_version: simulator_version
    )

    capture_ios_screenshots(
      scheme: screenshots_scheme,

      localize_simulator: true,
      languages: languages,

      devices: devices,

      # Don't rebuild the app, use the binaries from the given DerivedData
      # folder. This is so that we can parallelize test runs with multiple
      # device and locale combinations.
      test_without_building: true,
      derived_data_path: derived_data_directory,

      output_directory: screenshots_directory,
      clear_previous_screenshots: options[:clear_previous_screenshots] || true,

      # Explicitly set the iOS version to ensure we match the Simulators we
      # recreated above
      ios_version: simulator_version,

      # Retry a few times if something is a little flaky
      number_of_retries: 3,

      # But fail completely after those 3 retries
      stop_after_first_error: true,

      # Allow the caller to invoke dark mode
      dark_mode: options[:mode].to_s.downcase == "dark"
    )
  end

  lane :create_promo_screenshots do |options|
    unless Fastlane::Helper::GitHelper.has_git_lfs then
      UI.user_error!("Git LFS not enabled – Unable to generate promo screenshots. Run `git lfs install && git lfs fetch && git lfs pull` to fix this.")
    end

    promo_screenshots(
      orig_folder: screenshots_directory,
      metadata_folder: File.join(Dir.pwd, "metadata"),
      output_folder: File.join(Dir.pwd, "/promo_screenshots"),
      force: options[:force] || true
    )
  end

  desc "Rebuild Screenshot Devices"
  lane :rebuild_screenshot_devices do |options|
    require 'simctl'

    device_names = options[:devices].split(',') || screenshot_devices
    sim_version = options[:simulator_version] || simulator_version

    SimCtl.list_devices.each { |device|
      next unless device_names.include? device.name
      puts "Deleting #{device.name} because it already exists."
      device.delete
    }

    device_names.each { | device |
      runtime = SimCtl.runtime(name: "iOS #{sim_version}")
      devicetype = SimCtl.devicetype(name: device)

      device = SimCtl.create_device device, devicetype, runtime
    }
  end
end

########################################################################
# Configure Lanes
########################################################################
  #####################################################################################
  # update_certs_and_profiles
  # -----------------------------------------------------------------------------------
  # This lane downloads all the required certs and profiles and, 
  # if not run on CI it creates the missing ones.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane update_certs_and_profiles 
  #
  # Example:
  # bundle exec fastlane update_certs_and_profiles 
  #####################################################################################
  lane :update_certs_and_profiles do | options |
    alpha_code_signing
    internal_code_signing
    appstore_code_signing
  end

########################################################################
# Fastlane match code signing
########################################################################  
  private_lane :alpha_code_signing do |options|
    match(
      type: "enterprise",
      team_id: get_required_env("INT_EXPORT_TEAM_ID"),
      readonly: options[:readonly] || is_ci,
      app_identifier: ["com.codality.NotationalFlow.Alpha",
                      "com.codality.NotationalFlow.Alpha.Share"])
  end

  private_lane :internal_code_signing do |options|
    match(
      type: "enterprise",
      team_id: get_required_env("INT_EXPORT_TEAM_ID"),
      readonly: options[:readonly] || is_ci,
      app_identifier: ["com.codality.NotationalFlow.Internal",
                       "com.codality.NotationalFlow.Internal.Share"])
  end

  private_lane :appstore_code_signing do |options|
    match(
      type: "appstore",
      team_id: get_required_env("EXT_EXPORT_TEAM_ID"),
      readonly: options[:readonly] || is_ci,
      app_identifier: ["com.codality.NotationalFlow",
                       "com.codality.NotationalFlow.Share"],
      template_name: "NotationalFlow Keychain Access",
    )
  end

########################################################################
# Helper Lanes
########################################################################  
desc "Get a list of pull request from `start_tag` to the current state"
lane :get_pullrequests_list do | options |
  get_prs_list(repository:GHHELPER_REPO, start_tag:"#{options[:start_tag]}", report_path:"#{File.expand_path('~')}/simplenoteios_prs_list.txt")
end 

def fastlane_directory()
  File.expand_path File.dirname(__FILE__)
end

def derived_data_directory
  File.join(fastlane_directory, "DerivedData")
end

def workspace_name
  "Simplenote.xcworkspace"
end

def screenshots_scheme
  "SimplenoteScreenshots"
end

def workspace_path
  File.join(fastlane_directory, "../#{workspace_name}")
end

def screenshots_directory()
  File.join(fastlane_directory, "screenshots")
end

def screenshot_devices()
  [
    "iPhone Xs Max",
    "iPhone 8 Plus",
    "iPad Pro (12.9-inch) (2nd generation)",
    "iPad Pro (12.9-inch) (3rd generation)",
  ]
end

def simulator_version
  '13.3'
end
