# frozen_string_literal: true

default_platform(:ios)
fastlane_require 'xcodeproj'
fastlane_require 'dotenv'
fastlane_require 'open-uri'
fastlane_require 'buildkit'

UI.user_error!('Please run fastlane via `bundle exec`') unless FastlaneCore::Helper.bundler?

PROJECT_ROOT_FOLDER = File.dirname(File.expand_path(__dir__))
VERSION_FILE_PATH = File.join(PROJECT_ROOT_FOLDER, 'config', 'Version.Public.xcconfig')
OUTPUT_DIRECTORY_PATH = File.join(PROJECT_ROOT_FOLDER, 'build', 'results')
APP_STORE_BUNDLE_IDENTIFIER = 'com.codality.NotationalFlow'
DEFAULT_BRANCH = 'trunk'

TEAM_ID_APP_STORE_CONNECT = 'PZYM8XX95Q'
TEAM_ID_ENTERPRISE = '99KV9Z6BKV'

ORGANIZATION = 'automattic'
PROJECT_SLUG = 'simplenote-ios'
GITHUB_REPO = "#{ORGANIZATION}/#{PROJECT_SLUG}".freeze
BUILDKITE_ORGANIZATION = ORGANIZATION
BUILDKITE_PIPELINE = PROJECT_SLUG
APPCENTER_OWNER_NAME = ORGANIZATION

WORKSPACE = 'Simplenote.xcworkspace'

VERSION_CALCULATOR = Fastlane::Wpmreleasetoolkit::Versioning::SemanticVersionCalculator.new
VERSION_FORMATTER = Fastlane::Wpmreleasetoolkit::Versioning::FourPartVersionFormatter.new
BUILD_CODE_FORMATTER = Fastlane::Wpmreleasetoolkit::Versioning::FourPartBuildCodeFormatter.new
PUBLIC_VERSION_FILE = Fastlane::Wpmreleasetoolkit::Versioning::IOSVersionFile.new(xcconfig_path: VERSION_FILE_PATH)

SECRETS_ROOT = File.join(Dir.home, '.configure', 'simplenote-ios', 'secrets')
APP_STORE_CONNECT_KEY_PATH = File.join(SECRETS_ROOT, 'app_store_connect_fastlane_api_key.json')
$used_test_account_index = nil

RELEASE_NOTES_SOURCE_PATH = File.join(PROJECT_ROOT_FOLDER, 'Simplenote', 'Resources', 'release_notes.txt')

require_relative 'lib/env_manager'

# Important: These need to be imported after all the constants have be defined because the access them.
# A bit of a leaky abstraction but makes for lanes that are easier to write...
import 'lanes/localization.rb'
import 'lanes/release.rb'
import 'lanes/build.rb'

before_all do
  # Ensure we use the latest version of the toolkit
  check_for_toolkit_updates unless is_ci || ENV['FASTLANE_SKIP_TOOLKIT_UPDATE_CHECK']

  EnvManager.set_up(env_file_name: 'simplenote-ios')

  setup_ci
end

error do |lane, _exception, _options|
  deoccupy_test_account if lane == :run_ui_tests
end

########################################################################
# Environment
########################################################################
ENV['PROJECT_NAME'] = 'Simplenote'
ENV['PROJECT_ROOT_FOLDER'] = PROJECT_ROOT_FOLDER
ENV['APP_STORE_STRINGS_FILE_NAME'] = 'AppStoreStrings.pot'
ENV['PUBLIC_CONFIG_FILE'] = VERSION_FILE_PATH
ENV['DOWNLOAD_METADATA'] = './fastlane/download_metadata.swift'
ENV['FL_RELEASE_TOOLKIT_DEFAULT_BRANCH'] = 'trunk'

platform :ios do
  desc 'Updates the AppStoreStrings.pot file with the latest data'
  lane :update_appstore_strings do |version: release_version_current|
    prj_folder = Pathname.new(File.join(Dir.pwd, '..')).expand_path.to_s
    source_metadata_folder = File.join(prj_folder, 'fastlane', 'appstoreres', 'metadata', 'source')

    files = {
      whats_new: RELEASE_NOTES_SOURCE_PATH,
      app_store_subtitle: File.join(source_metadata_folder, 'subtitle.txt'),
      app_store_desc: File.join(source_metadata_folder, 'description.txt'),
      app_store_keywords: File.join(source_metadata_folder, 'keywords.txt')
    }

    ios_update_metadata_source(
      po_file_path: File.join(prj_folder, 'Simplenote', 'Resources', 'AppStoreStrings.pot'),
      source_files: files,
      release_version: version
    )
  end

  # This lane lacks documentation because it ought to be part of the localized
  # metadata download script instead!
  desc 'Updates the files with the localized keywords values for App Store Connect to match the 100 characters requirement'
  lane :sanitize_appstore_keywords do
    Dir['./metadata/**'].each do |locale_dir|
      keywords_path = File.join(locale_dir, 'keywords.txt')

      unless File.exist?(keywords_path)
        UI.message "Could not find keywords file in #{locale_dir}. Skipping."
        next
      end

      keywords = File.read(keywords_path)
      app_store_connect_keywords_length_limit = 100

      if keywords.length <= app_store_connect_keywords_length_limit
        UI.verbose "#{keywords_path} has less than #{app_store_connect_keywords_length_limit} characters. Not trimming."
        next
      end

      UI.message "#{keywords_path} has more than #{app_store_connect_keywords_length_limit} characters. Trimming it..."

      english_comma = ','
      arabic_comma = 'ØŒ'
      keywords = keywords.gsub(arabic_comma, english_comma) if File.basename(locale_dir) == 'ar-SA'

      keywords = keywords.split(english_comma)[0...-1].join(english_comma) until keywords.length <= app_store_connect_keywords_length_limit

      File.write(keywords_path, keywords)
    end
  end

  #####################################################################################
  # new_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane creates the release branch for a new hotfix release.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_hotfix_release [skip_confirm:<skip confirm>] [version:<version>]
  #
  # Example:
  # bundle exec fastlane new_hotfix_release version:10.6.1
  # bundle exec fastlane new_hotfix_release skip_confirm:true version:10.6.1
  #####################################################################################
  desc 'Creates a new hotfix branch for the given version:x.y.z. The branch will be cut from the tag x.y of the previous release'
  lane :new_hotfix_release do |options|
    prev_ver = ios_hotfix_prechecks(options)
    ios_bump_version_hotfix(
      previous_version: prev_ver,
      version: options[:version]
    )
  end

  #####################################################################################
  # finalize_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane finalizes the hotfix branch.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_hotfix_release [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane finalize_hotfix_release skip_confirm:true
  #####################################################################################
  desc 'Performs the final checks and triggers a release build for the hotfix in the current branch'
  lane :finalize_hotfix_release do |options|
    ios_finalize_prechecks(options)
    version = ios_get_app_version(public_version_xcconfig_file: VERSION_FILE_PATH)
    trigger_release_build(branch_to_build: "release/#{version}")
  end

  #####################################################################################
  # finalize_release
  # -----------------------------------------------------------------------------------
  # This lane finalize a release: updates store metadata, bump final version number,
  # remove branch protection and close milestone, then trigger the final release on CI
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_release [skip_confirm:<skip confirm>] [version:<version>]
  #
  # Example:
  # bundle exec fastlane finalize_release
  # bundle exec fastlane finalize_release skip_confirm:true
  #####################################################################################
  desc 'Trigger the final release build on CI'
  lane :finalize_release do |options|
    UI.user_error!('To finalize a hotfix, please use the finalize_hotfix_release lane instead') if ios_current_branch_is_hotfix

    ios_finalize_prechecks(options)

    UI.message('Checking app strings translation status...')
    check_translation_progress(
      glotpress_url: 'https://translate.wordpress.com/projects/simplenote/ios/',
      abort_on_violations: false
    )

    UI.message('Checking release notes strings translation status...')
    check_translation_progress(
      glotpress_url: 'https://translate.wordpress.com/projects/simplenote/ios/release-notes/',
      abort_on_violations: false
    )

    ios_download_strings_files_from_glotpress(
      project_url: 'https://translate.wordpress.com/projects/simplenote/ios/',
      locales: GLOTPRESS_TO_LPROJ_APP_LOCALE_CODES,
      download_dir: File.join(PROJECT_ROOT_FOLDER, 'Simplenote')
    )
    sanitize_appstore_keywords
    ios_lint_localizations(
      input_dir: 'Simplenote',
      allow_retry: true
    )
    ios_bump_version_beta

    # Wrap up
    version = ios_get_app_version(public_version_xcconfig_file: VERSION_FILE_PATH)
    remove_branch_protection(
      repository: GITHUB_REPO,
      branch: "release/#{version}"
    )
    set_milestone_frozen_marker(
      repository: GITHUB_REPO,
      milestone: version,
      freeze: false
    )
    create_new_milestone(repository: GITHUB_REPO)
    close_milestone(
      repository: GITHUB_REPO,
      milestone: version
    )

    # Start the build
    trigger_release_build(branch_to_build: "release/#{version}")
  end

  #####################################################################################
  # build_and_upload_beta_release
  # -----------------------------------------------------------------------------------
  # This lane builds a beta release of the app and optionally uploads
  # it for both internal and external distribution
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_beta_release [skip_confirm:<skip confirm>]
  #   [create_gh_release:<create release on GH>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_beta_release
  # bundle exec fastlane build_and_upload_beta_release skip_confirm:true
  # bundle exec fastlane build_and_upload_beta_release create_gh_release:true
  #####################################################################################
  desc 'Builds and uploads a beta release for distribution'
  lane :build_and_upload_beta_release do |options|
    build_and_upload_release(
      skip_confirm: options[:skip_confirm],
      create_gh_release: options[:create_gh_release],
      beta_release: true
    )
  end

  #####################################################################################
  # build_and_upload_stable_release
  # -----------------------------------------------------------------------------------
  # This lane builds a stable release of the app and optionally uploads
  # it for distribution
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_stable_release [skip_confirm:<skip confirm>]
  #   [create_gh_release:<create release on GH>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_stable_release
  # bundle exec fastlane build_and_upload_stable_release skip_confirm:true
  # bundle exec fastlane build_and_upload_stable_release create_gh_release:true
  #####################################################################################
  desc 'Builds and uploads a stable release for distribution'
  lane :build_and_upload_stable_release do |options|
    build_and_upload_release(
      skip_confirm: options[:skip_confirm],
      create_gh_release: options[:create_gh_release],
      beta_release: false
    )
  end

  #####################################################################################
  # build_and_upload_release
  # -----------------------------------------------------------------------------------
  # This lane builds the app and uploads it for both internal and external distribution
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_release [skip_confirm:<skip confirm>]
  #   [create_gh_release:<create release on GH>] [beta_release:<is a beta release>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_release
  # bundle exec fastlane build_and_upload_release skip_confirm:true
  # bundle exec fastlane build_and_upload_release beta_release:true
  #####################################################################################
  desc 'Builds and uploads for distribution'
  lane :build_and_upload_release do |options|
    ios_build_prechecks(
      skip_confirm: options[:skip_confirm],
      internal: false,
      internal_on_single_version: options[:beta_release],
      external: true
    )

    ios_build_preflight
    if options[:beta_release]
      build_and_upload_internal(
        skip_prechecks: true,
        skip_confirm: options[:skip_confirm]
      )
    end
    build_and_upload_to_app_store_connect(
      skip_prechecks: true,
      skip_confirm: options[:skip_confirm],
      beta_release: options[:beta_release],
      create_release: options[:create_gh_release]
    )
  end

  #####################################################################################
  # build_and_upload_internal
  # -----------------------------------------------------------------------------------
  # This lane builds the app and upload it for internal testing
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_internal [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_internal
  # bundle exec fastlane build_and_upload_internal skip_confirm:true
  #####################################################################################
  desc 'Builds and updates for distribution'
  lane :build_and_upload_internal do |options|
    unless options[:skip_prechecks]
      ios_build_prechecks(
        skip_confirm: options[:skip_confirm],
        internal: false
      )
    end
    ios_build_preflight unless options[:skip_prechecks]

    internal_code_signing

    gym(
      scheme: 'Simplenote',
      configuration: 'Distribution Internal',
      workspace: WORKSPACE,
      export_method: 'enterprise',
      clean: true,
      output_directory: OUTPUT_DIRECTORY_PATH,
      export_team_id: TEAM_ID_ENTERPRISE,
      export_options: {
        method: 'enterprise',
        provisioningProfiles: simplenote_provisioning_profiles(
          root_bundle_id: "#{APP_STORE_BUNDLE_IDENTIFIER}.Internal",
          match_type: 'InHouse'
        )
      }
    )

    File.rename(File.join(OUTPUT_DIRECTORY_PATH, 'Simplenote.ipa'), File.join(OUTPUT_DIRECTORY_PATH, 'Simplenote Internal.ipa'))

    appcenter_upload(
      api_token: EnvManager.get_required_env!('APPCENTER_API_TOKEN'),
      owner_name: 'automattic',
      owner_type: 'organization',
      app_name: 'Simplenote',
      file: File.join(OUTPUT_DIRECTORY_PATH, 'Simplenote Internal.ipa'),
      notify_testers: false
    )

    sentry_upload_dsym(
      auth_token: EnvManager.get_required_env!('SENTRY_AUTH_TOKEN'),
      org_slug: 'a8c',
      project_slug: 'simplenote-ios',
      dsym_path: lane_context[SharedValues::DSYM_OUTPUT_PATH]
    )
  end

  # Upload the localized metadata (from `fastlane/metadata/`) to App Store Connect
  #
  # @option [Boolean] with_screenshots (default: false) If true, will also upload the latest screenshot files to ASC
  #
  desc 'Upload the localized metadata to App Store Connect, optionally including screenshots.'
  lane :update_metadata_on_app_store_connect do |options|
    # Skip screenshots by default. The naming is "with" to make it clear that
    # callers need to opt-in to adding screenshots. The naming of the deliver
    # (upload_to_app_store) parameter, on the other hand, uses the skip verb.
    with_screenshots = options.fetch(:with_screenshots, false)
    skip_screenshots = !with_screenshots

    upload_to_app_store(
      app_identifier: APP_STORE_BUNDLE_IDENTIFIER,
      app_version: ios_get_app_version(public_version_xcconfig_file: VERSION_FILE_PATH),
      skip_binary_upload: true,
      screenshots_path: promo_screenshots_directory,
      skip_screenshots: skip_screenshots,
      overwrite_screenshots: true, # won't have effect if `skip_screenshots` is true
      phased_release: true,
      precheck_include_in_app_purchases: false,
      api_key_path: APP_STORE_CONNECT_KEY_PATH
    )
  end

  #####################################################################################
  # build_and_upload_installable_build
  # -----------------------------------------------------------------------------------
  # This lane builds the app and upload it for adhoc testing
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_installable_build
  #
  # Example:
  # bundle exec fastlane build_and_upload_installable_build
  #####################################################################################
  desc 'Builds and uploads an installable build'
  lane :build_and_upload_installable_build do
    alpha_code_signing

    # Get the current build version, and update it if needed
    build_number = generate_installable_build_number
    apply_build_number(build_number)

    gym(
      scheme: 'Simplenote',
      configuration: 'Distribution Alpha',
      workspace: WORKSPACE,
      export_method: 'enterprise',
      clean: true,
      output_directory: OUTPUT_DIRECTORY_PATH,
      export_team_id: TEAM_ID_ENTERPRISE,
      export_options: {
        method: 'enterprise',
        provisioningProfiles: simplenote_provisioning_profiles(
          root_bundle_id: "#{APP_STORE_BUNDLE_IDENTIFIER}.Alpha",
          match_type: 'InHouse'
        )
      }
    )

    File.rename(File.join(OUTPUT_DIRECTORY_PATH, 'Simplenote.ipa'), File.join(OUTPUT_DIRECTORY_PATH, 'Simplenote Alpha.ipa'))

    appcenter_upload(
      api_token: EnvManager.get_required_env!('APPCENTER_API_TOKEN'),
      owner_name: 'automattic',
      owner_type: 'organization',
      app_name: 'Simplenote-Installable-Builds',
      file: File.join(OUTPUT_DIRECTORY_PATH, 'Simplenote Alpha.ipa'),
      destinations: 'All-Users-of-Simplenote-Installable-Builds',
      notify_testers: false
    )

    sentry_upload_dsym(
      auth_token: EnvManager.get_required_env!('SENTRY_AUTH_TOKEN'),
      org_slug: 'a8c',
      project_slug: 'simplenote-ios',
      dsym_path: lane_context[SharedValues::DSYM_OUTPUT_PATH]
    )

    return if ENV['BUILDKITE_PULL_REQUEST'].nil?

    post_installable_build_pr_comment
  end

  # Posts a comment on the current PR to inform where to download a given Installable Build that was just published to App Center.
  #
  # Use this only after `upload_to_app_center` as been called, as it announces how said App Center build can be installed.
  #
  # @called_by CI â€” especially, relies on `BUILDKITE_PULL_REQUEST` being defined
  #
  def post_installable_build_pr_comment
    pr = ENV.fetch('BUILDKITE_PULL_REQUEST', nil)

    return if pr.nil?

    comment_body = prototype_build_details_comment(
      app_display_name: 'Simplenote Prototype Build',
      app_center_org_name: APPCENTER_OWNER_NAME,
      fold: true
    )

    comment_on_pr(
      project: GITHUB_REPO,
      pr_number: Integer(pr),
      reuse_identifier: 'installable-build-link--Simplenote-Installable-Builds',
      body: comment_body
    )
  end

  #####################################################################################
  # Screenshot lanes
  #####################################################################################

  # This is ideal when running locally. On CI, it's better to run each lane in
  # isolation, to leverage parallelism if necessary.
  #
  # On the other hand, right now Simplenote only needs one locale, so we might
  # as well keep using this on CI too. We still benefit from not having to
  # rebuild the app just to take the screenshots in light vs dark mode.
  desc 'Walk through the app taking screenshots.'
  lane :take_screenshots do |options|
    build_app_for_screenshots(options)

    # In order to preserve both light and dark screenshots, we won't be erasing
    # the screenshots folder in between captures but only on the first one.
    take_screenshots_from_app(
      options.merge({ mode: 'light', clear_previous_screenshots: true })
    )
    take_screenshots_from_app(
      options.merge({ mode: 'dark', clear_previous_screenshots: false })
    )
  end

  desc 'Build the binaries to run to take the screenshots'
  lane :build_app_for_screenshots do
    scan(
      workspace: workspace_path,
      scheme: screenshots_scheme,
      build_for_testing: true,
      derived_data_path: derived_data_directory
    )
  end

  desc 'Runs through the app taking screenshots, using a prebuilt binary'
  lane :take_screenshots_from_app do |options|
    devices = (options[:devices] || screenshot_devices).split(',').flatten

    languages = [
      'en-US'
    ]

    # Erase the Simulators between runs in order to get everything back to a
    # default state. This should also compensate for default CI installations
    # not having the Simulators need, by building them.
    rebuild_screenshot_devices(
      devices: devices,
      simulator_version: simulator_version
    )

    capture_ios_screenshots(
      scheme: screenshots_scheme,

      localize_simulator: true,
      languages: languages,

      devices: devices,

      # Don't rebuild the app, use the binaries from the given DerivedData
      # folder. This is so that we can parallelize test runs with multiple
      # device and locale combinations.
      test_without_building: true,
      derived_data_path: derived_data_directory,

      output_directory: screenshots_directory,
      clear_previous_screenshots: options.fetch(:clear_previous_screenshots, true),

      # Explicitly set the iOS version to ensure we match the Simulators we
      # recreated above
      ios_version: simulator_version,

      # Retry a few times if something is a little flaky
      number_of_retries: 3,

      # But fail completely after those 3 retries
      stop_after_first_error: true,

      # Run one Simulator at a time. One of the screenshots requires adding
      # text to a note but because we're using the same account across all the
      # Simulators, editing the note on one will result in the changes
      # appearing on the other making for unexpected and inconsistent
      # screnshots
      concurrent_simulators: false,

      # Allow the caller to invoke dark mode
      dark_mode: options[:mode].to_s.downcase == 'dark'
    )
  end

  lane :create_promo_screenshots do |options|
    unless Fastlane::Helper::GitHelper.has_git_lfs
      UI.user_error!('Git LFS not enabled â€“ Unable to generate promo screenshots. Run `git lfs install && git lfs fetch && git lfs pull` to fix this.')
    end

    # This value is defined in style.css. It would be good if there was a way
    # to make it parametric, so that if we update the CSS we don't risk this
    # getting out of sync.
    font_name = 'SourceSansPro-Regular.ttf'
    user_font_directory = File.join(Dir.home, 'Library/Fonts')
    user_font_path = File.join(user_font_directory, font_name)
    if File.exist?(user_font_path)
      UI.success("Custom font #{font_name} already installed locally.")
    else
      UI.message("Installing #{font_name} at #{user_font_path}.")
      `mkdir -p #{user_font_directory}`
      `cp #{File.join(Dir.pwd, "appstoreres/assets/#{font_name}")} #{user_font_path}`
    end

    promo_screenshots(
      orig_folder: options[:source] || screenshots_directory,
      metadata_folder: File.join(Dir.pwd, 'metadata'),
      output_folder: promo_screenshots_directory,
      force: options[:force] || true
    )
  end

  desc 'Rebuild Screenshot Devices'
  lane :rebuild_screenshot_devices do |options|
    require 'simctl'

    # Using flatten here because we may be getting a comma separated string if
    # called from the command line via "fastlane run" or an array if called by
    # another action that has already preformatted the value into an array.
    device_names = (options[:devices] || screenshot_devices).split(',').flatten
    sim_version = options[:simulator_version] || simulator_version

    SimCtl.list_devices.each do |device|
      next unless device_names.include? device.name

      UI.message("Deleting #{device.name} because it already exists.")
      device.delete
    end

    device_names.each do |device|
      runtime = SimCtl.runtime(name: "iOS #{sim_version}")
      devicetype = SimCtl.devicetype(name: device)

      SimCtl.create_device device, devicetype, runtime
    end
  end

  #####################################################################################
  # Test lanes
  #####################################################################################

  # Props to work done by others in this file and in
  # https://github.com/wordpress-mobile/WordPress-iOS/blob/trunk/fastlane/Fastfile
  # this is a combined rip-off from both

  #####################################################################################
  # test
  # -----------------------------------------------------------------------------------
  # Run unit tests
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane test [device:<Name of the iOS Simulator>]
  #
  # Example:
  # bundle exec fastlane test device:"iPhone 14"
  #####################################################################################
  desc 'Run Unit Tests'
  lane :run_unit_tests do |options|
    scan(
      workspace: workspace_name,
      scheme: 'Simplenote',
      device: options[:device] || 'iPhone 14',
      output_directory: OUTPUT_DIRECTORY_PATH,
      reset_simulator: true,
      result_bundle: true
    )
  end

  #####################################################################################
  # run_ui_tests
  # -----------------------------------------------------------------------------------
  # A lane to run a subset of automated UI tests. Since only login tests are
  # selected for now, there will be no credentials race condition.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane run_ui_tests [scheme:<Xcode scheme with UI tests>] [device:<Name of the iOS Simulator>] [test_account:<Test account email>]
  #
  # Example:
  # bundle exec fastlane run_ui_tests scheme:"SimplenoteUITests_Subset" device:"iPhone 14" test_account:"test.account@test.com"
  #####################################################################################
  desc 'Run UI tests'
  lane :run_ui_tests do |options|
    scan(
      workspace: workspace_name,
      scheme: options[:scheme] || 'SimplenoteUITests_Subset',
      device: options[:device] || 'iPhone 14',
      output_directory: OUTPUT_DIRECTORY_PATH,
      reset_simulator: true,
      xcargs: { UI_TEST_ACCOUNT: options[:test_account] || '' },
      result_bundle: true
    )
  end

  #####################################################################################
  # pick_test_account_and_run_ui_tests
  # -----------------------------------------------------------------------------------
  # Firstly tries to occupy a free test account, and then passes the account to
  # `run_ui_tests` lane. Frees up the account afterwards.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane pick_test_account_and_run_ui_tests [device:<Name of the iOS Simulator>]
  #
  # Example:
  # bundle exec fastlane pick_test_account_and_run_ui_tests device:"iPhone 14"
  #####################################################################################
  desc 'Occupy a free test account and run UI tests with it'
  lane :pick_test_account_and_run_ui_tests do |options|
    if is_ci
      sanitize_test_accounts
      find_free_test_account
      run_ui_tests(options.merge({ test_account: EnvManager.get_required_env!('UI_TESTS_ACCOUNT_EMAIL').sub('X', $used_test_account_index.to_s) }))
      deoccupy_test_account
    else
      UI.user_error!('This lane should be run only from CI')
    end
  end
end

########################################################################
# Fastlane Match Code Signing Lanes
########################################################################

# Downloads all the required certificates and profiles for both production and internal distribution builds.
# Optionally, it can create any new necessary certificates or profiles.
#
# @option [Boolean] readonly (default: true) Whether to only fetch existing certificates and profiles, without generating new ones.
lane :update_certs_and_profiles do |options|
  alpha_code_signing(options)
  internal_code_signing(options)
  appstore_code_signing(options)
end

# Downloads all the required certificates and profiles (using `match`) for the alpha builds in the enterprise account.
# Optionally, it can create any new necessary certificates or profiles.
#
# @option [Boolean] readonly (default: true) Whether to only fetch existing certificates and profiles, without generating new ones.
#
private_lane :alpha_code_signing do |options|
  update_code_signing_enterprise(
    app_identifiers: simplenote_app_identifiers(root_bundle_id: "#{APP_STORE_BUNDLE_IDENTIFIER}.Alpha"),
    readonly: options.fetch(:readonly, true)
  )
end

# Downloads all the required certificates and profiles (using `match`) for the internal builds in the enterprise account.
# Optionally, it can create any new necessary certificates or profiles.
#
# @option [Boolean] readonly (default: true) Whether to only fetch existing certificates and profiles, without generating new ones.
#
private_lane :internal_code_signing do |options|
  update_code_signing_enterprise(
    app_identifiers: simplenote_app_identifiers(root_bundle_id: "#{APP_STORE_BUNDLE_IDENTIFIER}.Internal"),
    readonly: options.fetch(:readonly, true)
  )
end

# Downloads all the required certificates and profiles for the production build.
# Optionally, it can create any new necessary certificates or profiles.
#
# @option [Boolean] readonly (default: true) Whether to only fetch existing certificates and profiles, without generating new ones.
private_lane :appstore_code_signing do |options|
  update_code_signing(
    type: 'appstore',
    team_id: TEAM_ID_APP_STORE_CONNECT,
    readonly: options.fetch(:readonly, true),
    app_identifiers: simplenote_app_identifiers,
    api_key_path: APP_STORE_CONNECT_KEY_PATH,
    template_name: 'NotationalFlow Keychain Access (Distribution)'
  )
end

def update_code_signing_enterprise(readonly:, app_identifiers:)
  if readonly
    # In readonly mode, we can use the API key
    api_key_path = APP_STORE_CONNECT_KEY_PATH
  else
    # The Enterprise account APIs do not support authentication via API key.
    # If we want to modify data (readonly = false) we need to authenticate manually.
    prompt_user_for_app_store_connect_credentials
    # We also need to pass no API key path, otherwise Fastlane will give
    # precedence to that authentication mode.
    api_key_path = nil
  end

  update_code_signing(
    type: 'enterprise',
    # Enterprise builds belong to the "internal" team
    team_id: TEAM_ID_ENTERPRISE,
    readonly: readonly,
    app_identifiers: app_identifiers,
    api_key_path: api_key_path
  )
end

# rubocop:disable Metrics/ParameterLists
def update_code_signing(type:, team_id:, readonly:, app_identifiers:, api_key_path:, template_name: nil)
  # NOTE: It might be neccessary to add `force: true` alongside `readonly: true` in order to regenerate some provisioning profiles.
  # If this turns out to be a hard requirement, we should consider updating the method with logic to toggle the two setting based on whether we're fetching or renewing.

  # Fail early if secrets not available via `EnvManager.get_required_env!`.
  # Otherwise, Fastlane will prompt to type them.
  access_key = EnvManager.get_required_env!('MATCH_S3_ACCESS_KEY')
  secret_access_key = EnvManager.get_required_env!('MATCH_S3_SECRET_ACCESS_KEY')

  match(
    storage_mode: 's3',
    s3_bucket: 'a8c-fastlane-match',
    s3_region: 'us-east-2',
    s3_access_key: access_key,
    s3_secret_access_key: secret_access_key,
    type: type,
    team_id: team_id,
    readonly: readonly,
    app_identifier: app_identifiers,
    api_key_path: api_key_path,
    template_name: template_name
  )
end
# rubocop:enable Metrics/ParameterLists

# Compiles the array of bundle identifiers for the different targets that
# make up the Simplenote app, to be used as the `app_identifier` parameter
# for the `match` action.
def simplenote_app_identifiers(root_bundle_id: APP_STORE_BUNDLE_IDENTIFIER)
  extension_bundle_ids =
    %w[Share Widgets Intents]
    .map { |suffix| "#{root_bundle_id}.#{suffix}" }

  [root_bundle_id, *extension_bundle_ids]
end

# Compiles the dictionary mapping of the bundle identifiers and provisioning
# profiles to be used in the `export_options > provisioningProfiles`
# parameter for the `build_app`/`gym` action.
def simplenote_provisioning_profiles(root_bundle_id: APP_STORE_BUNDLE_IDENTIFIER, match_type: 'AppStore')
  # FIXME: replace the array below with the following call once established
  # the impact of adding the mapping for the Widgets extension, which is
  # something we haven't had up to this point.
  #
  # simplenote_app_identifiers(root_bundle_id: root_bundle_id)
  [root_bundle_id, "#{root_bundle_id}.Share", "#{root_bundle_id}.Intents"]
    .to_h { |key| [key, "match #{match_type} #{key}"] }
end

def prompt_user_for_app_store_connect_credentials
  require 'credentials_manager'

  # If Fastlane cannot instantiate a user, it will ask the caller for the email.
  # Once we have it, we can set it as `FASTLANE_USER` in the environment (which has lifecycle limited to this call) so that the next commands will
  # already have access to it.
  # Note that if the user is already available to `AccountManager`, setting it in the environment is redundant, but Fastlane doesn't provide a way
  # to check it so we have to do it anyway.
  ENV['FASTLANE_USER'] = CredentialsManager::AccountManager.new.user
end

########################################################################
# Localization Lanes
########################################################################

########################################################################
# Helper Lanes
########################################################################

def fastlane_directory
  __dir__
end

def derived_data_directory
  File.join(fastlane_directory, 'DerivedData')
end

def workspace_name
  'Simplenote.xcworkspace'
end

def screenshots_scheme
  'SimplenoteScreenshots'
end

def workspace_path
  File.join(fastlane_directory, "../#{workspace_name}")
end

def screenshots_directory
  File.join(fastlane_directory, 'screenshots')
end

def promo_screenshots_directory
  File.join(fastlane_directory, 'promo_screenshots')
end

def screenshot_devices
  [
    'iPhone X',
    'iPhone 8',
    'iPad Pro (12.9-inch) (2nd generation)',
    'iPad Pro (12.9-inch) (3rd generation)'
  ]
end

def simulator_version
  '14.5'
end

def deoccupy_test_account
  return if $used_test_account_index.nil?

  UI.message("Freeing used test account #{$used_test_account_index}")
  change_test_account_availability('free')
  $used_test_account_index = nil
end

# Test accounts info is stored in JSON-formatted string, where keys represent
# the account index, and values are either "free" or BUILDKITE_BUILD_NUMBER, in case if account
# was occupied by a build. Returns the hash.
# Example:
#   fetch_test_accounts_hash
#     => {"0"=>"4079", "1"=>"free", "2"=>"free", "3"=>"free"}
def fetch_test_accounts_hash
  uri = URI.parse(EnvManager.get_required_env!('UI_TESTS_ACCOUNTS_JSON_URL'))
  response = Net::HTTP.get_response(uri)
  accounts_state = response.body.chomp
  JSON.parse(accounts_state)
end

# Finds the index of first free account in accounts hash, and marks it as accupied by current build.
# Crashed fastlane if free account was not found.
def find_free_test_account
  accounts_hash = fetch_test_accounts_hash
  UI.message('Looking for a free test account...')
  UI.message("Accounts state: #{accounts_hash}")

  $used_test_account_index = accounts_hash.key('free')

  UI.user_error!('Could not find free UI Test account. Quitting.') if $used_test_account_index.nil?
  UI.message("Free account index: #{$used_test_account_index}")
  change_test_account_availability(ENV['BUILDKITE_BUILD_NUMBER'].to_s)
end

# Replace a value in a key which is equal to $used_test_account_index global variable
# Example:
#   change_test_account_availability("free")
#     => {"0"=>"free", "1"=>"free", "2"=>"free", "3"=>"free"}
#
#   change_test_account_availability("4820")
#     => {"0"=>"4820", "1"=>"free", "2"=>"free", "3"=>"free"}
def change_test_account_availability(availability)
  accounts_hash = fetch_test_accounts_hash
  accounts_hash[$used_test_account_index.to_s] = availability
  submit_accounts_hash(accounts_hash)
end

def sanitize_test_accounts
  accounts_hash = fetch_test_accounts_hash
  UI.message('Sanitizing stale test accounts...')
  UI.message("Accounts before sanitizing: #{accounts_hash}")

  accounts_hash.each do |key, value|
    next if value == 'free' || job_running?(value)

    accounts_hash[key] = 'free'
    submit_accounts_hash(accounts_hash)
  end
end

def job_running?(job_number)
  client = Buildkit.new(token: EnvManager.get_required_env!('BUILDKITE_TOKEN'))
  build = client.build('automattic', 'simplenote-ios', job_number)

  state = build['state']

  UI.message("Status of Job Number #{job_number} is #{state}")

  build['state'] == 'running'
rescue StandardError
  false
end

def submit_accounts_hash(accounts_hash)
  UI.message("Writing new accounts state: #{accounts_hash}")
  uri = URI.parse(EnvManager.get_required_env!('UI_TESTS_ACCOUNTS_JSON_URL'))
  request = Net::HTTP::Post.new(uri)
  request.body = accounts_hash.to_json

  req_options = {
    use_ssl: uri.scheme == 'https'
  }

  Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
    http.request(request)
  end

  UI.message("Accounts state after write: #{fetch_test_accounts_hash}")
end

def apply_build_number(build_number)
  versions = Xcodeproj::Config.new(File.new(VERSION_FILE_PATH)).to_hash
  UI.message("Updating build version to #{build_number}")
  versions['VERSION_LONG'] = build_number
  new_config = Xcodeproj::Config.new(versions)
  new_config.save_as(Pathname.new(VERSION_FILE_PATH))
end

def generate_installable_build_number
  if ENV['BUILDKITE']
    commit = ENV.fetch('BUILDKITE_COMMIT', nil)[0, 7]
    branch = ENV.fetch('BUILDKITE_BRANCH', nil)
    pr_num = ENV.fetch('BUILDKITE_PULL_REQUEST', nil)
    build  = ENV.fetch('BUILDKITE_BUILD_ID', nil)

    pr_num == 'false' ? "#{branch}-#{commit}-#{build}" : "pr#{pr_num}-#{commit}-#{build}"
  else
    repo = Git.open(PROJECT_ROOT_FOLDER)
    commit = repo.current_branch
    branch = repo.revparse('HEAD')[0, 7]

    "#{branch}-#{commit}"
  end
end

# Returns the release version of the app in the format `1.2` or `1.2.3` if it is a hotfix
#
def release_version_current
  current_version = VERSION_FORMATTER.parse(PUBLIC_VERSION_FILE.read_release_version)
  VERSION_FORMATTER.release_version(current_version)
end

# Returns the next release version of the app in the format `1.2` or `1.2.3` if it is a hotfix
#
def release_version_next
  current_version = VERSION_FORMATTER.parse(PUBLIC_VERSION_FILE.read_release_version)
  next_calculated_release_version = VERSION_CALCULATOR.next_release_version(version: current_version)
  VERSION_FORMATTER.release_version(next_calculated_release_version)
end

# Returns the current build code of the app
#
def build_code_current
  # We use the four part (1.2.3.4) build code format, so the version calculator can be used to calculate the next four-part version
  version = VERSION_FORMATTER.parse(PUBLIC_VERSION_FILE.read_build_code(attribute_name: 'VERSION_LONG'))
  BUILD_CODE_FORMATTER.build_code(version: version)
end

# Returns the build code of the app for the code freeze.
# It is the release version name with build number (last of the four components) set to 0.
#
def build_code_code_freeze
  # We use the four part (1.2.3.4) build code format, so the version calculator can be used to calculate the next four-part version
  release_version_current = VERSION_FORMATTER.parse(PUBLIC_VERSION_FILE.read_release_version)
  build_code_code_freeze = VERSION_CALCULATOR.next_release_version(version: release_version_current)
  BUILD_CODE_FORMATTER.build_code(version: build_code_code_freeze)
end

# Returns the build code of the app for the code freeze.
# It is the release version name with build number (last of the four components) set to 0.
#
def build_code_hotfix(release_version:)
  version = VERSION_FORMATTER.parse(release_version)
  BUILD_CODE_FORMATTER.build_code(version: version)
end

# Returns the next build code of the app
#
def build_code_next
  # We use the four part (1.2.3.4) build code format, so the version calculator can be used to calculate the next four-part version
  build_code_current = VERSION_FORMATTER.parse(PUBLIC_VERSION_FILE.read_build_code(attribute_name: 'VERSION_LONG'))
  build_code_next = VERSION_CALCULATOR.next_build_number(version: build_code_current)
  BUILD_CODE_FORMATTER.build_code(version: build_code_next)
end

def release_branch_name(release_version: release_version_current)
  "release/#{release_version}"
end
