default_platform(:ios)
fastlane_require 'xcodeproj'
fastlane_require 'dotenv'
fastlane_require 'open-uri'

unless FastlaneCore::Helper.bundler?
  UI.user_error!('Please run fastlane via `bundle exec`')
end

USER_ENV_FILE_PATH = File.join(Dir.home, '.simplenoteios-env.default')
PROJECT_ENV_FILE_PATH = File.join(
  Dir.home, '.configure', 'simplenote-ios', 'secrets', 'project.env'
)
PROJECT_ROOT_FOLDER = File.dirname(File.expand_path(__dir__))
$used_test_account_index = nil

before_all do
  # Ensure we use the latest version of the toolkit
  check_for_toolkit_updates unless is_ci || ENV['FASTLANE_SKIP_TOOLKIT_UPDATE_CHECK']

  # Check that the env files exist
  unless is_ci || File.file?(USER_ENV_FILE_PATH)
    UI.user_error!("~/.simplenoteios-env.default not found: Please copy env/user.env-example to #{USER_ENV_FILE_PATH} and fill in the values")
  end
  unless File.file?(PROJECT_ENV_FILE_PATH)
    UI.user_error!("project.env not found: Make sure your configuration is up to date with `rake dependencies`")
  end

  # This allows code signing to work on CircleCI
  # It is skipped if this isn't running on CI
  # See https://circleci.com/docs/2.0/ios-codesigning/
  setup_circle_ci
end

error do |lane, exception, options|
  deoccupy_test_account if lane == :run_ui_tests
end

platform :ios do
########################################################################
# Environment
########################################################################
Dotenv.load(USER_ENV_FILE_PATH)
Dotenv.load(PROJECT_ENV_FILE_PATH)
ENV[GHHELPER_REPO="Automattic/simplenote-ios"]
ENV["PROJECT_NAME"]="Simplenote"
ENV["PROJECT_ROOT_FOLDER"]="./"
ENV['APP_STORE_STRINGS_FILE_NAME']='AppStoreStrings.pot'
ENV["PUBLIC_CONFIG_FILE"]="./config/Version.Public.xcconfig"
ENV["DOWNLOAD_METADATA"]="./fastlane/download_metadata.swift"
REPOSITORY_NAME="simplenote-ios"

# Use this instead of getting values from ENV directly
# It will throw an error if the requested value is missing
def get_required_env(key)
  unless ENV.key?(key)
    UI.user_error!("Environment variable '#{key}' is not set. Have you setup #{USER_ENV_FILE_PATH} correctly?")
  end
  ENV[key]
end

########################################################################
# Release Lanes
########################################################################
  #####################################################################################
  # code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane code_freeze [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane code_freeze
  # bundle exec fastlane code_freeze skip_confirm:true
  #####################################################################################
  desc "Creates a new release branch from the current develop"
  lane :code_freeze do | options |
    old_version = ios_codefreeze_prechecks(options)

    ios_bump_version_release()
    new_version = ios_get_app_version()
    extract_release_notes_for_version(version: new_version,
      release_notes_file_path: File.join(PROJECT_ROOT_FOLDER, 'RELEASE-NOTES.txt'),
      extracted_notes_file_path: File.join(PROJECT_ROOT_FOLDER, 'Simplenote', 'Resources', 'release_notes.txt'))
    ios_update_release_notes(new_version: new_version)
    get_prs_list(repository:GHHELPER_REPO, milestone: new_version, report_path:"#{File.expand_path('~')}/simplenoteios_prs_list_#{old_version}_#{new_version}.txt")
    setbranchprotection(repository:GHHELPER_REPO, branch: "release/#{new_version}")
    setfrozentag(repository:GHHELPER_REPO, milestone: new_version)

    ios_localize_project()
    trigger_beta_build(branch_to_build: "release/#{new_version}")
  end

  #####################################################################################
  # update_appstore_strings
  # -----------------------------------------------------------------------------------
  # This lane updates the AppStoreStrings.pot files with the latest content from
  # the release_notes.txt file and the other text sources
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane update_appstore_strings version:<release note version>
  #
  # Example:
  # bundle exec fastlane update_appstore_strings version:1.1
  #####################################################################################
  desc "Updates the AppStoreStrings.pot file with the latest data"
  lane :update_appstore_strings do | options |
    prj_folder = Pathname.new(File.join(Dir.pwd, "..")).expand_path.to_s
    source_metadata_folder = File.join(prj_folder, "fastlane/appstoreres/metadata/source")

    files = {
      whats_new: File.join(prj_folder,  "/Simplenote/Resources/release_notes.txt"),
      app_store_subtitle: File.join(source_metadata_folder, "subtitle.txt"),
      app_store_desc: File.join(source_metadata_folder, "description.txt"),
      app_store_keywords: File.join(source_metadata_folder, "keywords.txt")
    }

    ios_update_metadata_source(po_file_path: prj_folder + "/Simplenote/Resources/AppStoreStrings.pot",
      source_files: files,
      release_version: options[:version])
  end

  # This lane lacks documentation because it ought to be part of the localized
  # metadata download script instead!
  desc "Updates the files with the localized keywords values for App Store Connect to match the 100 characters requirement"
  lane :sanitize_appstore_keywords do | options |
    Dir["./metadata/**"].each do |locale_dir|
      keywords_path = File.join(locale_dir, 'keywords.txt')

      unless File.exists?(keywords_path)
        UI.message "Could not find keywords file in #{locale_dir}. Skipping."
        next
      end

      keywords = File.read(keywords_path)
      app_store_connect_keywords_length_limit = 100

      if keywords.length <= app_store_connect_keywords_length_limit
        UI.verbose "#{keywords_path} has less than #{app_store_connect_keywords_length_limit} characters. Not trimming."
        next
      end

      UI.message "#{keywords_path} has more than #{app_store_connect_keywords_length_limit} characters. Trimming it..."

      english_comma = ','
      arabic_comma = 'ØŒ'
      keywords = keywords.gsub(arabic_comma, english_comma) if File.basename(locale_dir) == 'ar-SA'

      until keywords.length <= app_store_connect_keywords_length_limit
        keywords = keywords.split(english_comma)[0...-1].join(english_comma)
      end

      File.write(keywords_path, keywords)
    end
  end

  #####################################################################################
  # new_beta_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new beta release. It will update the
  # current release branch by default. If you want to update a different branch
  # (i.e. hotfix branch) pass the related version with the 'base_version' param
  # (example: base_version:10.6.1 will work on the 10.6.1 branch)
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_beta_release [skip_confirm:<skip confirm>] [base_version:<version>]
  #
  # Example:
  # bundle exec fastlane new_beta_release
  # bundle exec fastlane new_beta_release skip_confirm:true
  # bundle exec fastlane new_beta_release base_version:10.6.1
  #####################################################################################
  desc "Updates a release branch for a new beta release"
  lane :new_beta_release do | options |
    ios_betabuild_prechecks(options)
    ios_update_metadata(options)
    ios_lint_localizations(input_dir: 'Simplenote', allow_retry: true)
    ios_bump_version_beta()
    ios_tag_build()
  end

  #####################################################################################
  # new_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new hotix release.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_hotfix_release [skip_confirm:<skip confirm>] [version:<version>]
  #
  # Example:
  # bundle exec fastlane new_hotfix_release version:10.6.1
  # bundle exec fastlane new_hotfix_release skip_confirm:true version:10.6.1
  #####################################################################################
  desc "Creates a new hotfix branch from the given tag"
  lane :new_hotfix_release do | options |
    prev_ver = ios_hotfix_prechecks(options)
    ios_bump_version_hotfix(previous_version: prev_ver, version: options[:version])
  end

  #####################################################################################
  # finalize_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane finalizes the hotfix branch.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_hotfix_release [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane finalize_hotfix_release skip_confirm:true
  #####################################################################################
  desc "Creates a new hotfix branch from the given tag"
  lane :finalize_hotfix_release do | options |
    ios_finalize_prechecks(options)
    version = ios_get_app_version()
    trigger_release_build(branch_to_build: "release/#{version}")
  end

  #####################################################################################
  # finalize_release
  # -----------------------------------------------------------------------------------
  # This lane finalize a release: updates store metadata, bump final version number,
  # remove branch protection and close milestone, then trigger the final release on CI
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_release [skip_confirm:<skip confirm>] [version:<version>]
  #
  # Example:
  # bundle exec fastlane finalize_release
  # bundle exec fastlane finalize_release skip_confirm:true
  #####################################################################################
  desc 'Trigger the final release build on CI'
  lane :finalize_release do | options |
    ios_finalize_prechecks(options)
    unless ios_current_branch_is_hotfix
      UI.message('Checking app strings translation status...')
      check_translation_progress(
        glotpress_url: 'https://translate.wordpress.com/projects/simplenote/ios/',
        abort_on_violations: false
      )

      UI.message("Checking release notes strings translation status...")
      check_translation_progress(
        glotpress_url: 'https://translate.wordpress.com/projects/simplenote/ios/release-notes/',
        abort_on_violations: false
      )

      ios_update_metadata(options)
      ios_lint_localizations(input_dir: 'Simplenote', allow_retry: true)
      ios_bump_version_beta() unless ios_current_branch_is_hotfix
    end

    # Wrap up
    version = ios_get_app_version()
    removebranchprotection(repository:GHHELPER_REPO, branch: "release/#{version}")
    setfrozentag(repository:GHHELPER_REPO, milestone: version, freeze: false)
    create_new_milestone(repository:GHHELPER_REPO)
    close_milestone(repository:GHHELPER_REPO, milestone: version)

    # Start the build
    trigger_release_build(branch_to_build: "release/#{version}")
  end

  #####################################################################################
  # build_and_upload_beta_release
  # -----------------------------------------------------------------------------------
  # This lane builds a beta release of the app and optionally uploads
  # it for both internal and external distribution
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_beta_release [skip_confirm:<skip confirm>]
  #   [create_gh_release:<create release on GH>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_beta_release
  # bundle exec fastlane build_and_upload_beta_release skip_confirm:true
  # bundle exec fastlane build_and_upload_beta_release create_gh_release:true
  #####################################################################################
  desc "Builds and uploads a beta release for distribution"
  lane :build_and_upload_beta_release do | options |
    build_and_upload_release(
      skip_confirm: options[:skip_confirm],
      create_gh_release: options[:create_gh_release],
      beta_release: true)
  end

  #####################################################################################
  # build_and_upload_stable_release
  # -----------------------------------------------------------------------------------
  # This lane builds a stable release of the app and optionally uploads
  # it for distribution
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_stable_release [skip_confirm:<skip confirm>]
  #   [create_gh_release:<create release on GH>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_stable_release
  # bundle exec fastlane build_and_upload_stable_release skip_confirm:true
  # bundle exec fastlane build_and_upload_stable_release create_gh_release:true
  #####################################################################################
  desc "Builds and uploads a stable release for distribution"
  lane :build_and_upload_stable_release do | options |
    build_and_upload_release(
      skip_confirm: options[:skip_confirm],
      create_gh_release: options[:create_gh_release],
      beta_release: false)
  end

  #####################################################################################
  # build_and_upload_release
  # -----------------------------------------------------------------------------------
  # This lane builds the app and uploads it for both internal and external distribution
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_release [skip_confirm:<skip confirm>]
  #   [create_gh_release:<create release on GH>] [beta_release:<is a beta release>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_release
  # bundle exec fastlane build_and_upload_release skip_confirm:true
  # bundle exec fastlane build_and_upload_release beta_release:true
  #####################################################################################
  desc "Builds and uploads for distribution"
  lane :build_and_upload_release do | options |
    ios_build_prechecks(skip_confirm: options[:skip_confirm],
      internal: false,
      internal_on_single_version: options[:beta_release],
      external: true)

    ios_build_preflight()
    build_and_upload_internal(skip_prechecks: true, skip_confirm: options[:skip_confirm]) if options[:beta_release]
    build_and_upload_itc(skip_prechecks: true, skip_confirm: options[:skip_confirm],
                         beta_release: options[:beta_release], create_release: options[:create_gh_release])
  end

  #####################################################################################
  # build_and_upload_internal
  # -----------------------------------------------------------------------------------
  # This lane builds the app and upload it for internal testing
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_internal [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_internal
  # bundle exec fastlane build_and_upload_internal skip_confirm:true
  #####################################################################################
  desc "Builds and updates for distribution"
  lane :build_and_upload_internal do | options |
    ios_build_prechecks(skip_confirm: options[:skip_confirm], internal: false) unless (options[:skip_prechecks])
    ios_build_preflight() unless (options[:skip_prechecks])

    internal_code_signing

    gym(
      scheme: "Simplenote",
      configuration: "Distribution Internal",
      workspace: "Simplenote.xcworkspace",
      export_method: "enterprise",
      clean: true,
      output_directory: "./build/",
      export_team_id: ENV["INT_EXPORT_TEAM_ID"],
      export_options: {
        method: "enterprise",
        provisioningProfiles: {
          "com.codality.NotationalFlow.Internal" => "match InHouse com.codality.NotationalFlow.Internal",
          "com.codality.NotationalFlow.Internal.Share" => "match InHouse com.codality.NotationalFlow.Internal.Share"
      }})

    sh("mv ../build/Simplenote.ipa \"../build/Simplenote Internal.ipa\"")

    appcenter_upload(
      api_token: ENV["APPCENTER_API_TOKEN"],
      owner_name: "automattic",
      owner_type: "organization",
      app_name: "Simplenote",
      file: "./build/Simplenote Internal.ipa",
      notify_testers: false
    )

    sentry_upload_dsym(
      auth_token: ENV["SENTRY_AUTH_TOKEN"],
      org_slug: 'a8c',
      project_slug: 'simplenote-ios',
      dsym_path: "./build/Simplenote.app.dSYM.zip"
    )
  end

  #####################################################################################
  # build_and_upload_itc
  # -----------------------------------------------------------------------------------
  # This lane builds the app and upload it for external distribution
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_itc [skip_confirm:<skip confirm>] [create_release:<Create release on GH>] [beta_release:<intermediate beta?>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_itc
  # bundle exec fastlane build_and_upload_itc skip_confirm:true
  #####################################################################################
  desc "Builds and uploads for distribution"
  lane :build_and_upload_itc do | options |
    ios_build_prechecks(skip_confirm: options[:skip_confirm], external: true) unless (options[:skip_prechecks])
    ios_build_preflight() unless (options[:skip_prechecks])

    appstore_code_signing

    gym(scheme: "Simplenote",
      workspace: "Simplenote.xcworkspace",
      configuration: "Distribution AppStore",
      clean: true,
      export_options: {
        method: "app-store",
        export_team_id: ENV["EXT_EXPORT_TEAM_ID"],
        provisioningProfiles: {
          "com.codality.NotationalFlow" => "match AppStore com.codality.NotationalFlow",
          "com.codality.NotationalFlow.Share" => "match AppStore com.codality.NotationalFlow.Share"
        }
      }
    )

    testflight(
      skip_waiting_for_build_processing: true,
      api_key_path: File.join(Dir.home, '.configure', 'simplenote-ios', 'secrets', 'app_store_connect_fastlane_api_key.json')
    )

    sh("rm ../Simplenote.ipa")
    dSYM_PATH = File.dirname(Dir.pwd) + "/Simplenote.app.dSYM.zip"

    sentry_upload_dsym(
      dsym_path: dSYM_PATH,
      auth_token: ENV["SENTRY_AUTH_TOKEN"],
      org_slug: 'a8c',
      project_slug: 'simplenote-ios',
    )

    sh("rm #{dSYM_PATH}")

    if (options[:create_release])
      archive_zip_path = File.dirname(Dir.pwd) + "/Simplenote.xarchive.zip"
      zip(path: lane_context[SharedValues::XCODEBUILD_ARCHIVE], output_path: archive_zip_path)

      version = options[:beta_release] ? ios_get_build_version : ios_get_app_version
      create_release(repository:GHHELPER_REPO,
        version: version,
        release_notes_file_path: File.join(PROJECT_ROOT_FOLDER, 'Simplenote', 'Resources', 'release_notes.txt'),
        release_assets: archive_zip_path.to_s,
        prerelease: options[:beta_release]
      )

      sh("rm #{archive_zip_path}")
    end
  end

  #####################################################################################
  # trigger_beta_build
  # -----------------------------------------------------------------------------------
  # This lane triggers a beta build on CI
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane trigger_beta_build [branch_to_build:<branch_name>]
  #
  #####################################################################################
  lane :trigger_beta_build do | options |
    circleci_trigger_job(
      circle_ci_token: ENV["CIRCLE_CI_AUTH_TOKEN"],
      repository: REPOSITORY_NAME,
      organization: "Automattic",
      branch: options[:branch_to_build],
      job_params: {"beta_build" => true}
    )
  end

  #####################################################################################
  # trigger_release_build
  # -----------------------------------------------------------------------------------
  # This lane triggers a stable release build on CI
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane trigger_release_build [branch_to_build:<branch_name>]
  #
  #####################################################################################
  lane :trigger_release_build do | options |
    circleci_trigger_job(
      circle_ci_token: ENV["CIRCLE_CI_AUTH_TOKEN"],
      repository: REPOSITORY_NAME,
      organization: "Automattic",
      branch: options[:branch_to_build],
      job_params: {"release_build" => true}
    )
  end

  #####################################################################################
  # build_and_upload_installable_build
  # -----------------------------------------------------------------------------------
  # This lane builds the app and upload it for adhoc testing
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_installable_build [version_long:<version_long>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_installable_build
  # bundle exec fastlane build_and_upload_installable_build build_number:123
  #####################################################################################
  desc "Builds and uploads an installable build"
  lane :build_and_upload_installable_build do | options |
    alpha_code_signing

    # Get the current build version, and update it if needed
    version_config_path = "../config/Version.Public.xcconfig"
    versions = Xcodeproj::Config.new(File.new(version_config_path)).to_hash
    build_number = versions["VERSION_LONG"]

    if options.key?(:build_number)
      build_number = options[:build_number]

      UI.message("Updating build version to #{build_number}")

      versions["VERSION_LONG"] = build_number
      new_config = Xcodeproj::Config.new(versions)
      new_config.save_as(Pathname.new(version_config_path))
    end

    gym(
      scheme: "Simplenote",
      configuration: "Distribution Alpha",
      workspace: "Simplenote.xcworkspace",
      export_method: "enterprise",
      clean: true,
      output_directory: "./build/",
      export_team_id: ENV["INT_EXPORT_TEAM_ID"],
      export_options: {
        method: "enterprise",
        provisioningProfiles: {
          "com.codality.NotationalFlow.Alpha" => "match InHouse com.codality.NotationalFlow.Alpha",
          "com.codality.NotationalFlow.Alpha.Share" => "match InHouse com.codality.NotationalFlow.Alpha.Share"
      }})

    sh("mv ../build/Simplenote.ipa \"../build/Simplenote Alpha.ipa\"")

    appcenter_upload(
      api_token: get_required_env("APPCENTER_API_TOKEN"),
      owner_name: "automattic",
      owner_type: "organization",
      app_name: "Simplenote-Installable-Builds",
      file: "./build/Simplenote Alpha.ipa",
      destinations: "All-Users-of-Simplenote-Installable-Builds",
      notify_testers: false
    )

    # Install SentryCLI prior to trying to upload dSYMs
    sh("curl -sL https://sentry.io/get-cli/ | bash")

    sentry_upload_dsym(
      auth_token: get_required_env("SENTRY_AUTH_TOKEN"),
      org_slug: 'a8c',
      project_slug: 'simplenote-ios',
      dsym_path: "./build/Simplenote.app.dSYM.zip",
    )

    download_url = Actions.lane_context[SharedValues::APPCENTER_DOWNLOAD_LINK]
    UI.message("Successfully built and uploaded installable build here: #{download_url}")
    install_url = "https://install.appcenter.ms/orgs/automattic/apps/Simplenote-Installable-Builds/"

    # Create a comment.json file so that Peril to comment with the build details, if this is running on CI
    comment_body = "You can test the changes on this Pull Request by downloading it from AppCenter [here](#{install_url}) with build number: #{build_number}. IPA is available [here](#{download_url}). If you need access to this, you can ask a maintainer to add you."
    File.write("comment.json", { body: comment_body }.to_json)
  end

  #####################################################################################
  # Screenshot lanes
  #####################################################################################

  # This is ideal when running locally. On CI, it's better to run each lane in
  # isolation, to leverage parallelism if necessary.
  #
  # On the other hand, right now Simplenote only needs one locale, so we might
  # as well keep using this on CI too. We still benefit from not having to
  # rebuild the app just to take the screenshots in light vs dark mode.
  desc "Walk through the app taking screenshots."
  lane :take_screenshots do |options|
    build_app_for_screenshots(options)

    # In order to preserve both light and dark screenshots, we won't be erasing
    # the screenshots folder in between captures but only on the first one.
    take_screenshots_from_app(
      options.merge({ mode: 'light', clear_previous_screenshots: true })
    )
    take_screenshots_from_app(
      options.merge({ mode: 'dark', clear_previous_screenshots: false })
    )
  end

  desc "Build the binaries to run to take the screenshots"
  lane :build_app_for_screenshots do
    scan(
      workspace: workspace_path,
      scheme: screenshots_scheme,
      build_for_testing: true,
      derived_data_path: derived_data_directory,
    )
  end

  desc "Runs through the app taking screenshots, using a prebuilt binary"
  lane :take_screenshots_from_app do |options|
    devices = (options[:devices] || screenshot_devices).split(',').flatten()

    languages = [
      "en-US"
    ]

    # Erase the Simulators between runs in order to get everything back to a
    # default state. This should also compensate for default CI installations
    # not having the Simulators need, by building them.
    rebuild_screenshot_devices(
      devices: devices,
      simulator_version: simulator_version
    )

    capture_ios_screenshots(
      scheme: screenshots_scheme,

      localize_simulator: true,
      languages: languages,

      devices: devices,

      # Don't rebuild the app, use the binaries from the given DerivedData
      # folder. This is so that we can parallelize test runs with multiple
      # device and locale combinations.
      test_without_building: true,
      derived_data_path: derived_data_directory,

      output_directory: screenshots_directory,
      clear_previous_screenshots: options.fetch(:clear_previous_screenshots, true),

      # Explicitly set the iOS version to ensure we match the Simulators we
      # recreated above
      ios_version: simulator_version,

      # Retry a few times if something is a little flaky
      number_of_retries: 3,

      # But fail completely after those 3 retries
      stop_after_first_error: true,

      # Run one Simulator at a time. One of the screenshots requires adding
      # text to a note but because we're using the same account across all the
      # Simulators, editing the note on one will result in the changes
      # appearing on the other making for unexpected and inconsistent
      # screnshots
      concurrent_simulators: false,

      # Allow the caller to invoke dark mode
      dark_mode: options[:mode].to_s.downcase == "dark"
    )
  end

  lane :create_promo_screenshots do |options|
    unless Fastlane::Helper::GitHelper.has_git_lfs then
      UI.user_error!("Git LFS not enabled â€“ Unable to generate promo screenshots. Run `git lfs install && git lfs fetch && git lfs pull` to fix this.")
    end

    # This value is defined in style.css. It would be good if there was a way
    # to make it parametric, so that if we update the CSS we don't risk this
    # getting out of sync.
    font_name = "SourceSansPro-Regular.ttf"
    user_font_directory = File.join(Dir.home, "Library/Fonts")
    user_font_path = File.join(user_font_directory, font_name)
    if File.exists?(user_font_path)
      UI.success("Custom font #{font_name} already installed locally.")
    else
      UI.message("Installing #{font_name} at #{user_font_path}.")
      `mkdir -p #{user_font_directory}`
      `cp #{File.join(Dir.pwd, "appstoreres/assets/#{font_name}")} #{user_font_path}`
    end

    promo_screenshots(
      orig_folder: options[:source] || screenshots_directory,
      metadata_folder: File.join(Dir.pwd, "metadata"),
      output_folder: promo_screenshots_directory,
      force: options[:force] || true
    )
  end

  desc "Rebuild Screenshot Devices"
  lane :rebuild_screenshot_devices do |options|
    require 'simctl'

    # Using flatten here because we may be getting a comma separated string if
    # called from the command line via "fastlane run" or an array if called by
    # another action that has already preformatted the value into an array.
    device_names = (options[:devices] || screenshot_devices).split(',').flatten
    sim_version = options[:simulator_version] || simulator_version

    SimCtl.list_devices.each { |device|
      next unless device_names.include? device.name
      UI.message("Deleting #{device.name} because it already exists.")
      device.delete
    }

    device_names.each { |device|
      runtime = SimCtl.runtime(name: "iOS #{sim_version}")
      devicetype = SimCtl.devicetype(name: device)

      SimCtl.create_device device, devicetype, runtime
    }
  end

  #####################################################################################
  # UI tests lanes
  #####################################################################################

  # Props to work done by others in this file and in
  # https://github.com/wordpress-mobile/WordPress-iOS/blob/develop/fastlane/Fastfile
  # this is a combined rip-off from both

  #####################################################################################
  # run_ui_tests
  # -----------------------------------------------------------------------------------
  # A lane to run a subset of automated UI tests. Since only login tests are
  # selected for now, there will be no credentials race condition.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane run_ui_tests [scheme:<Xcode scheme with UI tests>] [device:<Name of the iOS Simulator>] [test_account:<Test account email>]
  #
  # Example:
  # bundle exec fastlane run_ui_tests scheme:"SimplenoteUITests_Subset" device:"iPhone 12" test_account:"test.account@test.com"
  #####################################################################################
  desc "Run UI tests"
  lane :run_ui_tests do | options |
    scan(
      workspace: workspace_name,
      scheme: options[:scheme] || "SimplenoteUITests_Subset",
      device: options[:device] || "iPhone 12",
      prelaunch_simulator: true,
      reset_simulator: true,
      xcargs: { UI_TEST_ACCOUNT: options[:test_account] || '' }
    )
  end

  #####################################################################################
  # pick_test_account_and_run_ui_tests
  # -----------------------------------------------------------------------------------
  # Firstly tries to occupy a free test account, and then passes the account to
  # `run_ui_tests` lane. Frees up the account afterwards.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane pick_test_account_and_run_ui_tests [device:<Name of the iOS Simulator>]
  #
  # Example:
  # bundle exec fastlane pick_test_account_and_run_ui_tests device:"iPhone 12"
  #####################################################################################
  desc "Occupy a free test account and run UI tests with it"
  lane :pick_test_account_and_run_ui_tests do | options |
    if is_ci
      sanitize_test_accounts
      find_free_test_account
      run_ui_tests(options.merge({ test_account: get_required_env("UI_TESTS_ACCOUNT_EMAIL").sub("X", $used_test_account_index.to_s)}))
      deoccupy_test_account
    else
      UI.user_error!("This lane should be run only from CI")
    end
  end
end

########################################################################
# Configure Lanes
########################################################################
  #####################################################################################
  # update_certs_and_profiles
  # -----------------------------------------------------------------------------------
  # This lane downloads all the required certs and profiles and,
  # if not run on CI it creates the missing ones.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane update_certs_and_profiles
  #
  # Example:
  # bundle exec fastlane update_certs_and_profiles
  #####################################################################################
  lane :update_certs_and_profiles do | options |
    alpha_code_signing
    internal_code_signing
    appstore_code_signing
  end

  lane :upload_screenshots do |options|
    # This uses the following env vars from the user env:
    # DELIVER_USER
    # DELIVER_APP_IDENTIFIER
    # FASTLANE_PASSWORD
    #
    # and from the project env:
    # FASTLANE_ITC_TEAM_ID
    upload_to_app_store(
      edit_live: false,
      use_live_version: false,
      screenshots_path: promo_screenshots_directory,
      skip_binary_upload: true,
      skip_metadata: true,
      skip_app_version_update: true,

      # Prechecks
      run_precheck_before_submit: false,
      precheck_include_in_app_purchases: false,

      # Delete all the previous screenshots on ASC
      overwrite_screenshots: true,
      # Set this to true to skip the interactive confirmation of the
      # screenshots that will be uploaded. Please, though, don't do it, unless
      # you disable the overwrite option above. If we loose the screenshot that
      # are on ASC, we might not be able to recover them, unless we checkout
      # whichever version made them and generate them again.
      force: false,
      submit_for_review: false
    )
  end

########################################################################
# Fastlane match code signing
########################################################################
  private_lane :alpha_code_signing do |options|
    match(
      type: "enterprise",
      team_id: get_required_env("INT_EXPORT_TEAM_ID"),
      readonly: true,
      app_identifier: ["com.codality.NotationalFlow.Alpha",
                      "com.codality.NotationalFlow.Alpha.Share"])
  end

  private_lane :internal_code_signing do |options|
    match(
      type: "enterprise",
      team_id: get_required_env("INT_EXPORT_TEAM_ID"),
      readonly: true,
      app_identifier: ["com.codality.NotationalFlow.Internal",
                       "com.codality.NotationalFlow.Internal.Share"])
  end

  private_lane :appstore_code_signing do |options|
    match(
      type: "appstore",
      team_id: get_required_env("EXT_EXPORT_TEAM_ID"),
      readonly: true,
      app_identifier: ["com.codality.NotationalFlow",
                       "com.codality.NotationalFlow.Share"],
      template_name: "NotationalFlow Keychain Access (Distribution)",
    )
  end

########################################################################
# Helper Lanes
########################################################################
desc "Get a list of pull request from `milestone` to the current state"
lane :get_pullrequests_list do | options |
  get_prs_list(
    repository:GHHELPER_REPO,
    milestone: options[:milestone],
    report_path: File.join(Dir.home, 'simplenoteios_prs_list.txt')
  )
end

def fastlane_directory()
  File.expand_path File.dirname(__FILE__)
end

def derived_data_directory
  File.join(fastlane_directory, "DerivedData")
end

def workspace_name
  "Simplenote.xcworkspace"
end

def screenshots_scheme
  "SimplenoteScreenshots"
end

def workspace_path
  File.join(fastlane_directory, "../#{workspace_name}")
end

def screenshots_directory()
  File.join(fastlane_directory, "screenshots")
end

def promo_screenshots_directory
  File.join(fastlane_directory, "promo_screenshots")
end

def screenshot_devices()
  [
    "iPhone X",
    "iPhone 8",
    "iPad Pro (12.9-inch) (2nd generation)",
    "iPad Pro (12.9-inch) (3rd generation)",
  ]
end

def simulator_version
  '14.5'
end

def deoccupy_test_account
  return if $used_test_account_index == nil
  UI.message("Freeing used test account #{$used_test_account_index}")
  change_test_account_availability("free")
  $used_test_account_index = nil
end

# Test accounts info is stored in JSON-formatted string, where keys represent
# the account index, and values are either "free" or CIRCLE_BUILD_NUM, in case if account
# was occupied by a build. Returns the hash.
# Example:
#   get_test_accounts_hash
#     => {"0"=>"4079", "1"=>"free", "2"=>"free", "3"=>"free"}
def get_test_accounts_hash
  uri = URI.parse(get_required_env("UI_TESTS_ACCOUNTS_JSON_URL"))
  response = Net::HTTP.get_response(uri)
  accounts_state = response.body.chomp
  JSON.parse(accounts_state)
end

# Finds the index of first free account in accounts hash, and marks it as accupied by current build.
# Crashed fastlane if free account was not found.
def find_free_test_account
  accounts_hash = get_test_accounts_hash
  UI.message("Looking for a free test account...")
  UI.message("Accounts state: #{accounts_hash}")

  $used_test_account_index = accounts_hash.key('free')

  UI.user_error!("Could not find free UI Test account. Quitting.") if $used_test_account_index.nil?
  UI.message("Free account index: #{$used_test_account_index}")
  change_test_account_availability("#{get_required_env("CIRCLE_BUILD_NUM")}")
end

# Replace a value in a key which is equal to $used_test_account_index global variable
# Example:
#   change_test_account_availability("free")
#     => {"0"=>"free", "1"=>"free", "2"=>"free", "3"=>"free"}
#
#   change_test_account_availability("4820")
#     => {"0"=>"4820", "1"=>"free", "2"=>"free", "3"=>"free"}
def change_test_account_availability(availability)
  accounts_hash = get_test_accounts_hash
  accounts_hash[$used_test_account_index.to_s] = availability
  submit_accounts_hash(accounts_hash)
end

def sanitize_test_accounts
  accounts_hash = get_test_accounts_hash
  UI.message("Sanitizing stale test accounts...")
  UI.message("Accounts before sanitizing: #{accounts_hash}")

  accounts_hash.each do |key, value|
    next if value == "free" || is_job_running(value)
    accounts_hash[key] = "free"
    submit_accounts_hash(accounts_hash)
  end
end

def is_job_running(job_number)
  uri = URI.parse("https://circleci.com/api/v2/project/gh/Automattic/simplenote-ios/job/#{job_number}")
  response = Net::HTTP.get_response(uri)
  return if response.code != "200"

  response_hash = JSON.parse(response.body)
  UI.message("Status of CircleCI Job Number #{job_number} is #{response_hash['status']}")
  response_hash["status"] == "running"
end

def submit_accounts_hash(accounts_hash)
  UI.message("Writing new accounts state: #{accounts_hash}")
  uri = URI.parse(get_required_env("UI_TESTS_ACCOUNTS_JSON_URL"))
  request = Net::HTTP::Post.new(uri)
  request.body = accounts_hash.to_json

  req_options = {
    use_ssl: uri.scheme == "https",
  }

  response = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
    http.request(request)
  end

  UI.message("Accounts state after write: #{get_test_accounts_hash}")
end
